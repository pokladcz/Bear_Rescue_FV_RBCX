syntax = "proto3";

import "nanopb.proto";

message None {
}

enum MotorMode {
  POWER = 0;
  BRAKE = 1;
  VELOCITY = 2;
  POSITION = 3;
  POSITION_IDLE = 4;
  COUPLE_POWER = 5;
}

message RegCoefs {
  uint32 p = 1;
  uint32 i = 2;
  uint32 d = 3;
}

message MotorConfig {
  uint32 velEpsilon = 1;
  uint32 posEpsilon = 2;
  uint32 maxAccel = 3;
}

message CoprocReq {
  oneof payload {
    None keepalive = 1;
    SetLeds setLeds = 4;
    GetButtons getButtons = 5;
    SetStupidServo setStupidServo = 6;
    UltrasoundReq ultrasoundReq = 7;
    MotorReq motorReq = 8;
    BuzzerReq buzzerReq = 9;
    CalibratePower calibratePower = 10;
    None shutdownPower = 11;
    None versionReq = 12;
    RtcReq rtcReq = 13;
    I2cReq i2cReq = 14;
    EspWatchdogSettings espWatchdogSettings = 15;
    CoprocStartupMessage coprocStartupMessage = 16;
    SmartServoReq smartServoReq = 17;
  }
  
  message SetLeds {
    LedsEnum ledsOn = 1;
  }
  
  enum LedsEnum {
    NONE = 0;
    L1 = 1;
    L2 = 2;
    L3 = 4;
    L4 = 8;
  }
  
  message GetButtons {
  }
  
  message SetStupidServo {
    uint32 servoIndex = 1;
    oneof servoCmd {
      None disable = 4;
      float setPosition = 5;
    }
  }
  
  message UltrasoundReq {
    uint32 utsIndex = 1;
    oneof utsCmd {
      None singlePing = 4;
    }
  }
  
  message SetMotorCoupling {
    uint32 coupleAxis = 1;
  }
  
  message MotorReq {
    uint32 motorIndex = 1;
    oneof motorCmd {
      None getState = 4;
      sint32 setPower = 5;
      sint32 setBrake = 6;
      sint32 setVelocity = 7;
      sint32 homePosition = 8;
      SetPosition setPosition = 10;
      SetPosition addPosition = 11;
      RegCoefs setVelocityRegCoefs = 16;
      RegCoefs setPositionRegCoefs = 17;
      MotorConfig setConfig = 18;
      SetMotorCoupling setCoupling = 19;
    }
    
    message SetPosition {
      sint32 targetPosition = 1;
      sint32 runningVelocity = 2;
    }
  }

  message BuzzerReq {
    bool on = 1;
  }

  message CalibratePower {
    uint32 vccMv = 1;
    uint32 battMidMv = 2;
    uint32 vRef33Mv = 3;
    uint32 temperatureC = 4;
  }

  message RtcReq {
    oneof rtcCmd {
      None get = 1;
      uint32 setTime = 2;
      uint32 setAlarm = 3;
    }
  }

  message I2cReq {
    oneof payload {
      OledReq oledReq = 1;
      MpuReq mpuReq = 2;
    }
  }

  message OledReq {
    oneof oledCmd {
      OledInit init = 1;
      OledColor fill = 2;
      None update = 3;
      OledDrawPixel drawPixel = 4;
      OledWriteString writeString = 5;
      OledSetCursor setCursor = 6;
      OledDrawLine drawLine = 7;
      OledDrawArc drawArc = 8;
      OledDrawCircle drawCircle = 9;
      OledDrawRectangle drawRectangle = 10;
    }
  }

  enum OledColor {
    OLED_BLACK = 0;
    OLED_WHITE = 1;
  }

  enum OledFont {
    OLED_FONT_6X8 = 0;
    OLED_FONT_7X10 = 1;
    OLED_FONT_11X18 = 2;
    OLED_FONT_16X26 = 3;
  }

  message OledInit {
    uint32 height = 1;
    uint32 width = 2;
    bool rotate = 3;
    bool inverseColor = 4;
  }

  message OledDrawPixel {
    uint32 x = 1;
    uint32 y = 2;
    OledColor color = 3;
  }

  message OledWriteString {
    string text = 1 [(nanopb).max_length = 32];
    OledFont font = 2;
    OledColor color = 3;
  }

  message OledSetCursor {
    uint32 x = 1;
    uint32 y = 2;
  }

  message OledDrawLine {
    uint32 x1 = 1;
    uint32 y1 = 2;
    uint32 x2 = 3;
    uint32 y2 = 4;
    OledColor color = 5;
  }

  message OledDrawArc {
    uint32 x = 1;
    uint32 y = 2;
    uint32 radius = 3;
    uint32 start_angle = 4;
    uint32 sweep = 5;
    OledColor color = 6;
  }

  message OledDrawCircle {
    uint32 x = 1;
    uint32 y = 2;
    uint32 radius = 3;
    OledColor color = 4;
  }

  message OledDrawRectangle {
    uint32 x1 = 1;
    uint32 y1 = 2;
    uint32 x2 = 3;
    uint32 y2 = 4;
    OledColor color = 5;
  }

  message MpuReq {
    oneof mpuCmd {
      None init = 1;
      None oneSend = 2;
      None startSend = 3;
      None stopSend = 4;
      uint32 setCompressCoef = 5;
      None getCompressCoef = 6;
    }
  }

  message EspWatchdogSettings {
    bool disable = 1;
  }

  // This is intended to be the first message the ESP32 sends
  // after startup, so it can request various stuff in a single pb message.
  message CoprocStartupMessage {
    bool getButtons = 1;
    bool getVersion = 2;
    bool getRtc = 3;
    EspWatchdogSettings espWatchdogSettings = 4;
  }

  message SmartServoReq {
    bool expect_response = 1;
    bytes data = 2 [(nanopb).max_size = 24]; 
  }
}

message CoprocStat {
  oneof payload {
    None ledsStat = 4;
    ButtonsStat buttonsStat = 5;
    None stupidServoStat = 6;
    UltrasoundStat ultrasoundStat = 7;
    PowerAdcStat powerAdcStat = 8;
    VersionStat versionStat = 9;
    MotorStat motorStat = 10;
    RtcStat rtcStat = 11;
    FaultStat faultStat = 12;
    MpuStat mpuStat = 13;
    SmartServoStat smartServoStat = 14;
  }

  message ButtonsStat {
    ButtonsEnum buttonsPressed = 1;
  }

  enum ButtonsEnum {
    BNONE = 0;
    BOFF = 1;
    B1 = 2;
    B2 = 4;
    B3 = 8;
    B4 = 16;
    BON = 32;
  }

  message UltrasoundStat {
    uint32 utsIndex = 1;
    uint32 roundtripMicrosecs = 2;
  }

  message MotorStat {
    uint32 motorIndex = 1;
    MotorMode mode = 2;
    sint32 power = 3; // range <-32768; 32767>
    sint32 velocity = 4;
    sint32 position = 5;
  }

  message PowerAdcStat {
    uint32 vccMv = 1;
    uint32 battMidMv = 2;
    int32 temperatureC = 3;
  }

  message VersionStat {
    bytes revision = 1 [(nanopb).max_size = 8, (nanopb).fixed_length = true];
    uint32 number = 2;
    bool dirty = 3;
  }

  message RtcStat {
    uint32 time = 1;
    uint32 alarm = 2;
    RtcFlags flags = 3;
  }

  enum RtcFlags {
    RTC_NONE = 0;
    RTC_NOT_READY = 1;
    RTC_ALARM = 2;
  }

  message FaultStat {
    oneof fault {
        None oledFault = 1;
        None mpuFault = 2;
    }
  }

  message MpuStat {
    uint32 compressCoef = 1;
    MpuVector accel = 2;
    MpuVector gyro = 3;
  }

  message MpuVector {
    int32 x = 1;
    int32 y = 2;
    int32 z = 3;
  }

  message SmartServoStat {
    bytes data = 1 [(nanopb).max_size = 24];
  }
}
